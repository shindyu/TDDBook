ここまでの細かいテクニックはそれほど重要ではない。
責務を分離し、あとからメンテナンスしやすい実装コードにしていくことが重要。
テスト駆動でやると、コードスメルに敏感になれる。

アーキテクチャは好きなものを使えば良い。
いまのチームではMVC。十分。
アーキテクチャありきで始めなくても、必要になったら取り入れたらいい。
テストはあるからリファクタリングできる。テストは資産。

実行時間がかかるテストは悪。実際に通信してタイムアウトを待ったりするようなテストはTDDのサイクルに乗らない。
CIでやってくださいmm

Happy TDD Coding!
